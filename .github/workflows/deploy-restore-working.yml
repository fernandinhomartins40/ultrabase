name: 🔄 Deploy - Restaurar Estado Funcional

# Controle de concorrência
concurrency:
  group: ultrabase-restore-deploy
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      force_restore:
        description: 'Forçar restauração completa'
        required: false
        default: 'false'

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  DEPLOY_DIR: '/opt/supabase-manager'

jobs:
  restore-deploy:
    name: 🔄 Restaurar ao Estado Funcional
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📋 Info da Restauração
      run: |
        echo "🔄 Restauração ao Estado Funcional - Ultrabase"
        echo "=============================================="
        echo "Commit de Restauração: 079c450 (OpenSSL + JWT)"
        echo "Branch Atual: restore-working-state"
        echo "Forçar Restauração: ${{ github.event.inputs.force_restore }}"
        echo "=============================================="

    - name: 📥 Checkout do Estado Funcional
      uses: actions/checkout@v4
      with:
        ref: '079c45097c9aa01b8ea44c7a322bf13e31c733e4'
        fetch-depth: 1

    - name: 🔑 Configurar SSH
      run: |
        echo "🔑 Configurando SSH para restauração..."
        sudo apt-get update && sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
        echo "✅ SSH configurado"

    - name: 🔍 Verificar estado atual da VPS
      id: vps-check
      run: |
        echo "🔍 Verificando estado atual da VPS..."
        
        # Verificar se é primeira instalação E se dependências existem
        FIRST_INSTALL="false"
        NEEDS_DEPS="false"
        NEEDS_APP_START="false"
        
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== Verificando Infraestrutura ==='
          
          # Verificar Docker
          if ! command -v docker >/dev/null 2>&1; then
            echo '❌ Docker: NÃO INSTALADO'
            FIRST_INSTALL='true'
          else
            echo \"✅ Docker: \$(docker --version 2>/dev/null || echo 'VERSION ERROR')\"
          fi
          
          # Verificar Node.js
          if ! command -v node >/dev/null 2>&1; then
            echo '❌ Node.js: NÃO INSTALADO'
            FIRST_INSTALL='true'
          else
            echo \"✅ Node.js: \$(node --version)\"
          fi
          
          # Verificar PM2
          if ! command -v pm2 >/dev/null 2>&1; then
            echo '❌ PM2: NÃO INSTALADO'
            FIRST_INSTALL='true'
          else
            echo '✅ PM2: INSTALADO'
          fi
          
          # Verificar Nginx
          if ! command -v nginx >/dev/null 2>&1; then
            echo '❌ Nginx: NÃO INSTALADO'
            FIRST_INSTALL='true'
          else
            echo '✅ Nginx: INSTALADO'
          fi
          
          # Verificar OpenSSL (necessário para chaves JWT)
          if ! command -v openssl >/dev/null 2>&1; then
            echo '❌ OpenSSL: NÃO INSTALADO'
            FIRST_INSTALL='true'
          else
            echo \"✅ OpenSSL: \$(openssl version 2>/dev/null || echo 'VERSION ERROR')\"
          fi
          
          # Verificar diretório da aplicação
          if [ ! -d '${{ env.DEPLOY_DIR }}' ]; then
            echo '❌ Diretório da aplicação: NÃO EXISTE'
            FIRST_INSTALL='true'
          else
            echo '✅ Diretório da aplicação: EXISTE'
            
            # Verificar se dependências Node.js existem (CRÍTICO)
            if [ ! -d '${{ env.DEPLOY_DIR }}/src/node_modules' ] || [ ! -f '${{ env.DEPLOY_DIR }}/src/node_modules/express/package.json' ]; then
              echo '❌ Dependências Node.js: FALTANDO'
              NEEDS_DEPS='true'
            else
              echo '✅ Dependências Node.js: INSTALADAS'
            fi
            
            # Verificar se aplicação está rodando no PM2
            export PATH='/usr/local/bin:\$PATH'
            if ! pm2 list 2>/dev/null | grep -q supabase-manager; then
              echo '❌ Aplicação PM2: NÃO RODANDO'
              NEEDS_APP_START='true'
            else
              echo '✅ Aplicação PM2: RODANDO'
            fi
          fi
          
          echo \"FIRST_INSTALL=\$FIRST_INSTALL\" > /tmp/install_check.txt
          echo \"NEEDS_DEPS=\$NEEDS_DEPS\" >> /tmp/install_check.txt
          echo \"NEEDS_APP_START=\$NEEDS_APP_START\" >> /tmp/install_check.txt
        " || echo -e "FIRST_INSTALL=true\nNEEDS_DEPS=true\nNEEDS_APP_START=true" > /tmp/vps_status.txt
        
        # Capturar resultados
        FIRST_INSTALL=$(sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cat /tmp/install_check.txt 2>/dev/null | grep FIRST_INSTALL | cut -d'=' -f2" || echo "true")
        NEEDS_DEPS=$(sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cat /tmp/install_check.txt 2>/dev/null | grep NEEDS_DEPS | cut -d'=' -f2" || echo "true")
        NEEDS_APP_START=$(sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "cat /tmp/install_check.txt 2>/dev/null | grep NEEDS_APP_START | cut -d'=' -f2" || echo "true")
        
        echo "first_install=$FIRST_INSTALL" >> $GITHUB_OUTPUT
        echo "needs_deps=$NEEDS_DEPS" >> $GITHUB_OUTPUT
        echo "needs_app_start=$NEEDS_APP_START" >> $GITHUB_OUTPUT
        
        echo "🏁 Primeira instalação: $FIRST_INSTALL"
        echo "🏁 Precisa dependências: $NEEDS_DEPS"
        echo "🏁 Precisa iniciar app: $NEEDS_APP_START"

    - name: 🚀 Instalação Inicial Completa (primeira vez)
      if: steps.vps-check.outputs.first_install == 'true'
      run: |
        echo "🚀 Executando instalação inicial completa..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          set -e
          echo '🔄 Atualizando sistema...'
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get upgrade -y
          
          echo '🐳 Instalando Docker...'
          # Remover versões antigas
          apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
          
          # Instalar dependências
          apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
          
          # Adicionar chave GPG do Docker
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          
          # Adicionar repositório
          echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          
          # Instalar Docker
          apt-get update -y
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          
          # Iniciar Docker
          systemctl start docker
          systemctl enable docker
          
          echo '✅ Docker instalado'
          docker --version
          
          echo '📦 Instalando Node.js 18...'
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          
          echo '✅ Node.js instalado'
          node --version
          npm --version
          
          echo '🌐 Instalando PM2...'
          npm install -g pm2
          
          # Recarregar ambiente para reconhecer PM2
          export PATH=\"/usr/local/bin:\$PATH\"
          hash -r
          
          # Configurar PM2 startup
          pm2 startup systemd -u root --hp /root
          
          echo '✅ PM2 instalado'
          pm2 --version
          
          echo '🌐 Instalando Nginx...'
          apt-get install -y nginx
          
          # Configurar Nginx básico
          echo 'server {' > /etc/nginx/sites-available/ultrabase
          echo '    listen 80;' >> /etc/nginx/sites-available/ultrabase
          echo '    server_name _;' >> /etc/nginx/sites-available/ultrabase
          echo '    access_log /var/log/nginx/ultrabase.access.log;' >> /etc/nginx/sites-available/ultrabase
          echo '    error_log /var/log/nginx/ultrabase.error.log;' >> /etc/nginx/sites-available/ultrabase
          echo '    location / {' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_pass http://127.0.0.1:3080;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_http_version 1.1;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_set_header Upgrade \$http_upgrade;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_set_header Connection '\''upgrade'\'';' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_set_header Host \$host;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_set_header X-Real-IP \$remote_addr;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_set_header X-Forwarded-Proto \$scheme;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_cache_bypass \$http_upgrade;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_connect_timeout 60s;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_send_timeout 60s;' >> /etc/nginx/sites-available/ultrabase
          echo '        proxy_read_timeout 60s;' >> /etc/nginx/sites-available/ultrabase
          echo '    }' >> /etc/nginx/sites-available/ultrabase
          echo '    location /health {' >> /etc/nginx/sites-available/ultrabase
          echo '        access_log off;' >> /etc/nginx/sites-available/ultrabase
          echo '        return 200 '\''healthy'\'';' >> /etc/nginx/sites-available/ultrabase
          echo '        add_header Content-Type text/plain;' >> /etc/nginx/sites-available/ultrabase
          echo '    }' >> /etc/nginx/sites-available/ultrabase
          echo '}' >> /etc/nginx/sites-available/ultrabase
          
          # Ativar site
          ln -sf /etc/nginx/sites-available/ultrabase /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Testar configuração
          nginx -t
          
          # Iniciar Nginx
          systemctl start nginx
          systemctl enable nginx
          
          echo '✅ Nginx instalado e configurado'
          
          echo '📁 Criando diretórios...'
          mkdir -p ${{ env.DEPLOY_DIR }}
          mkdir -p /opt/supabase-manager-backups
          mkdir -p /var/log/ultrabase
          
          echo '🔧 Instalando ferramentas extras...'
          apt-get install -y jq curl wget git htop ufw openssl
          
          echo '🔒 Configurando firewall básico...'
          ufw --force enable
          ufw allow ssh
          ufw allow 80
          ufw allow 443
          ufw --force reload
          
          echo '🎯 Instalação inicial completa!'
          echo '=== Versões Instaladas ==='
          echo \"Docker: \$(docker --version)\"
          echo \"Node.js: \$(node --version)\"
          echo \"PM2: \$(pm2 --version)\"
          echo \"Nginx: \$(nginx -v 2>&1)\"
          echo \"OpenSSL: \$(openssl version)\"
        "

    - name: 📦 Backup dos Dados Atuais
      run: |
        echo "📦 Fazendo backup dos dados atuais antes da restauração..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR=/opt/supabase-manager-backups/backup_before_restore_\$TIMESTAMP
          mkdir -p \$BACKUP_DIR
          
          # Backup crítico sempre
          if [ -f ${{ env.DEPLOY_DIR }}/src/instances.json ]; then
            cp ${{ env.DEPLOY_DIR }}/src/instances.json \$BACKUP_DIR/
            echo '✅ instances.json backed up'
          fi
          
          # Backup do estado atual se existir
          if [ -d ${{ env.DEPLOY_DIR }} ]; then
            tar -czf \$BACKUP_DIR/current_state.tar.gz -C ${{ env.DEPLOY_DIR }} . 2>/dev/null || echo 'Backup parcial'
          fi
          
          echo \"📦 Backup criado: \$BACKUP_DIR\"
        "

    - name: 🔄 Restaurar ao Estado Funcional
      run: |
        echo "🔄 Restaurando ao commit funcional 079c450..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          # Verificar se repositório existe
          if [ ! -d .git ]; then
            echo '🆕 Primeira vez: clonando repositório...'
            git clone https://github.com/fernandinhomartins40/ultrabase.git .
          else
            echo '📥 Fazendo stash das mudanças atuais...'
            git stash push -m 'Backup antes da restauração' 2>/dev/null || true
          fi
          
          echo '🔄 Fazendo checkout para o commit funcional...'
          git fetch origin
          git checkout 079c45097c9aa01b8ea44c7a322bf13e31c733e4
          
          echo '✅ Código restaurado ao estado funcional'
          echo 'Commit atual:'
          git log --oneline -1
        "

    - name: 🔄 Restaurar Dados Preservados
      run: |
        echo "🔄 Restaurando dados críticos..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}
          
          # Procurar backup mais recente
          LATEST_BACKUP=\$(ls -t /opt/supabase-manager-backups/backup_before_restore_* 2>/dev/null | head -1 || echo '')
          
          if [ -n \"\$LATEST_BACKUP\" ] && [ -f \"\$LATEST_BACKUP/instances.json\" ]; then
            mkdir -p src
            cp \"\$LATEST_BACKUP/instances.json\" src/instances.json
            echo '✅ instances.json restaurado do backup'
          else
            echo '⚠️ Nenhum backup de instances.json encontrado'
          fi
          
          echo '🛡️ Dados críticos preservados'
        "

    - name: 📦 Instalar Dependências
      run: |
        echo "📦 Instalando dependências do estado funcional..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}/src
          echo 'Instalando dependências do Node.js...'
          npm install --production --silent
          echo '✅ Dependências instaladas'
          
          # Verificar se instalação foi bem-sucedida
          if [ -d node_modules ] && [ -f node_modules/express/package.json ]; then
            echo '✅ Express instalado corretamente'
          else
            echo '❌ Erro na instalação das dependências'
            exit 1
          fi
        "

    - name: 🔄 Reiniciar Aplicação
      run: |
        echo "🔄 Reiniciando aplicação no estado funcional..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          cd ${{ env.DEPLOY_DIR }}/src
          
          # Recarregar ambiente para PM2
          export PATH=\"/usr/local/bin:\$PATH\"
          hash -r
          
          # Parar aplicação atual se existir
          pm2 stop supabase-manager 2>/dev/null || true
          pm2 delete supabase-manager 2>/dev/null || true
          
          echo '🚀 Iniciando aplicação no estado funcional...'
          pm2 start server.js --name supabase-manager
          
          pm2 save
          echo '✅ Aplicação restaurada e iniciada'
        "

    - name: ⏳ Aguardar Estabilização
      run: |
        echo "⏳ Aguardando aplicação estabilizar..."
        sleep 15

    - name: 🔍 Verificação Final
      run: |
        echo "🔍 Verificação final do estado restaurado..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          # Recarregar ambiente
          export PATH=\"/usr/local/bin:\$PATH\"
          hash -r
          
          # Verificar PM2
          if pm2 list | grep -q supabase-manager; then
            echo '✅ PM2 rodando'
          else
            echo '❌ PM2 não está rodando'
            exit 1
          fi
          
          # Verificar health check
          for i in {1..5}; do
            if curl -f -s http://localhost:3080/api/health >/dev/null 2>&1; then
              echo '✅ Health check OK'
              break
            else
              echo \"⏳ Tentativa \$i/5...\"
              sleep 10
            fi
            
            if [ \$i -eq 5 ]; then
              echo '❌ Health check falhou após 5 tentativas'
              exit 1
            fi
          done
        "

    - name: 📊 Relatório da Restauração
      if: always()
      run: |
        echo "📊 RELATÓRIO DA RESTAURAÇÃO"
        echo "=========================="
        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo 'Estado Restaurado: Commit 079c450 (OpenSSL + JWT)'
          echo 'Aplicação Funcional: SIM'
          echo ''
          
          echo '=== Status da Aplicação ==='
          pm2 list --no-colors | grep -E 'name|supabase-manager' || echo 'PM2 não encontrado'
          
          echo ''
          echo '=== Instâncias Preservadas ==='
          if [ -f ${{ env.DEPLOY_DIR }}/src/instances.json ]; then
            INSTANCES=\$(cat ${{ env.DEPLOY_DIR }}/src/instances.json | jq '.instances | length' 2>/dev/null || echo '0')
            echo \"📊 \$INSTANCES instâncias preservadas\"
          else
            echo 'Nenhuma instância encontrada'
          fi
          
          echo ''
          echo '=== Commit Atual ==='
          cd ${{ env.DEPLOY_DIR }} && git log --oneline -1
          
          echo ''
          echo '=== Ferramentas Verificadas ==='
          echo \"OpenSSL: \$(openssl version)\"
          echo \"Node.js: \$(node --version)\"
          echo \"PM2: \$(pm2 --version)\"
          
          echo ''
          echo '🎯 Aplicação: http://${{ env.VPS_HOST }}/'
          echo '✅ Estado funcional restaurado!'
        "

    - name: 🎉 Restauração Concluída
      run: |
        echo "🎉 RESTAURAÇÃO AO ESTADO FUNCIONAL CONCLUÍDA!"
        echo "📍 Commit Restaurado: 079c450"
        echo "🛡️ Dados Preservados: SIM"
        echo "🚀 Aplicação: http://${{ env.VPS_HOST }}/"
        echo "✅ Sistema funcionando no último estado estável"