name: Deploy Supabase Instance Manager to VPS Hostinger

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  APP_DIR: '/opt/supabase-manager'
  MANAGER_PORT: '3080'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ env.VPS_HOST }}
        username: ${{ env.VPS_USER }}
        password: ${{ secrets.VPS_PASSWORD }}
        port: 22
        timeout: 900s
        command_timeout: 900s
        script: |
          # Fun√ß√£o de log
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }
          
          # ====================================
          # ETAPA 1: PREPARAR AMBIENTE
          # ====================================
          log "üöÄ INICIANDO DEPLOY SUPABASE INSTANCE MANAGER - ETAPA 1: Preparando ambiente..."
          
          # Configura√ß√µes
          APP_DIR="${{ env.APP_DIR }}"
          REPO_URL="https://github.com/fernandinhomartins40/ultrabase.git"
          
          # Parar inst√¢ncias existentes ANTES de qualquer opera√ß√£o
          log "‚èπÔ∏è Parando gerenciador e inst√¢ncias existentes..."
          
          # Parar gerenciador na porta 3080
          PID=$(lsof -t -i:3080 2>/dev/null) || true
          if [ ! -z "$PID" ]; then
            kill -9 $PID
            log "‚úÖ Gerenciador parado (PID: $PID)"
          fi
          
          # Parar todas as inst√¢ncias Supabase ativas
          if [ -d "$APP_DIR/supabase-core" ]; then
            cd $APP_DIR/supabase-core
            for compose_file in docker-compose-*.yml; do
              if [ -f "$compose_file" ]; then
                log "‚èπÔ∏è Parando inst√¢ncia: $(basename "$compose_file")"
                docker compose -f "$compose_file" down --remove-orphans || true
              fi
            done
          fi
          
          # Criar diret√≥rio principal
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # ====================================
          # ETAPA 2: BAIXAR/ATUALIZAR C√ìDIGO
          # ====================================
          log "üöÄ ETAPA 2: Baixando c√≥digo do Supabase Instance Manager..."
          
          # Se n√£o existe reposit√≥rio, clonar
          if [ ! -d ".git" ]; then
            log "üì• Clonando reposit√≥rio Ultrabase..."
            git clone $REPO_URL . || {
              log "‚ùå Clone falhou, usando download direto..."
              curl -L https://github.com/fernandinhomartins40/ultrabase/archive/main.tar.gz | tar xz --strip-components=1
            }
          else
            # Atualizar reposit√≥rio existente
            log "üîÑ Atualizando reposit√≥rio..."
            git fetch origin && git reset --hard origin/main && git clean -fd
          fi
          
          # Verificar se estrutura foi baixada corretamente
          if [ ! -d "src" ]; then
            log "‚ùå Diret√≥rio src n√£o encontrado!"
            exit 1
          fi
          
          if [ ! -d "supabase-core" ]; then
            log "‚ùå Diret√≥rio supabase-core n√£o encontrado!"
            exit 1
          fi
          
          if [ ! -f "src/server.js" ]; then
            log "‚ùå Arquivo server.js n√£o encontrado!"
            exit 1
          fi
          
          log "‚úÖ C√≥digo baixado com sucesso"
          
          # ====================================
          # ETAPA 3: INSTALAR DEPEND√äNCIAS
          # ====================================
          log "üöÄ ETAPA 3: Verificando/instalando depend√™ncias..."
          
          # Atualizar sistema
          apt-get update -qq
          
          # Instalar Docker se necess√°rio
          if ! command -v docker >/dev/null 2>&1; then
            log "üì¶ Instalando Docker..."
            curl -fsSL https://get.docker.com | sh
            systemctl start docker
            systemctl enable docker
          else
            log "‚úÖ Docker j√° instalado: $(docker --version)"
          fi
          
          # Verificar Docker Compose
          if ! docker compose version >/dev/null 2>&1; then
            log "üì¶ Instalando Docker Compose..."
            apt-get install -y docker-compose-plugin
          else
            log "‚úÖ Docker Compose j√° instalado: $(docker compose version)"
          fi
          
          # Instalar Node.js se necess√°rio
          if ! command -v node >/dev/null 2>&1; then
            log "üì¶ Instalando Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
          else
            NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
            if [ "$NODE_VERSION" -lt 18 ]; then
              log "üì¶ Atualizando Node.js para vers√£o 18+..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
              apt-get install -y nodejs
            else
              log "‚úÖ Node.js j√° instalado: $(node --version)"
            fi
          fi
          
          # Instalar PM2 para gerenciamento de processos
          if ! command -v pm2 >/dev/null 2>&1; then
            log "üì¶ Instalando PM2..."
            npm install -g pm2
          else
            log "‚úÖ PM2 j√° instalado: $(pm2 --version)"
          fi
          
          # ====================================
          # ETAPA 4: CONFIGURAR APLICA√á√ÉO
          # ====================================
          log "üöÄ ETAPA 4: Configurando aplica√ß√£o..."
          
          # Navegar para diret√≥rio do gerenciador
          cd $APP_DIR/src
          
          # Instalar depend√™ncias NPM
          log "üì¶ Instalando depend√™ncias NPM..."
          npm install --production --silent
          
          # Criar arquivo de configura√ß√£o de produ√ß√£o
          log "‚öôÔ∏è Criando configura√ß√µes de produ√ß√£o..."
          
          # Configurar vari√°veis de ambiente
          cat > .env << EOF
          NODE_ENV=production
          MANAGER_PORT=${{ env.MANAGER_PORT }}
          VPS_HOST=${{ env.VPS_HOST }}
          MAX_INSTANCES=20
          DOCKER_DIR=../supabase-core
          EOF
          
          # Criar diret√≥rios necess√°rios
          mkdir -p logs
          
          # Inicializar arquivo de inst√¢ncias se n√£o existir
          if [ ! -f "instances.json" ] || [ ! -s "instances.json" ]; then
            echo "{}" > instances.json
            log "‚úÖ Arquivo instances.json inicializado"
          fi
          
          # Configurar permiss√µes
          chmod +x install.sh || true
          chmod +x start.sh || true
          chmod +x stop.sh || true
          
          # ====================================
          # ETAPA 5: CONFIGURAR FIREWALL
          # ====================================
          log "üöÄ ETAPA 5: Configurando firewall..."
          
          # Configurar UFW se dispon√≠vel
          if command -v ufw >/dev/null 2>&1; then
            # Permitir portas do gerenciador
            ufw allow ${{ env.MANAGER_PORT }}/tcp || true
            
            # Permitir faixa de portas para inst√¢ncias
            ufw allow 8100:8199/tcp || true  # Kong HTTP
            ufw allow 8400:8499/tcp || true  # Kong HTTPS
            ufw allow 5500:5599/tcp || true  # PostgreSQL
            ufw allow 4100:4199/tcp || true  # Analytics
            
            log "‚úÖ Firewall configurado"
          else
            log "‚ö†Ô∏è UFW n√£o dispon√≠vel, configure firewall manualmente"
          fi
          
          # ====================================
          # ETAPA 6: INICIAR APLICA√á√ÉO
          # ====================================
          log "üöÄ ETAPA 6: Iniciando Supabase Instance Manager..."
          
          # Parar inst√¢ncia PM2 anterior se existir
          pm2 delete supabase-manager 2>/dev/null || true
          
          # Criar arquivo ecosystem.config.js para PM2
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [{
              name: 'supabase-manager',
              script: 'server.js',
              instances: 1,
              autorestart: true,
              watch: false,
              max_memory_restart: '1G',
              env: {
                NODE_ENV: 'production',
                PORT: process.env.MANAGER_PORT || 3080
              },
              error_file: './logs/err.log',
              out_file: './logs/out.log',
              log_file: './logs/combined.log',
              time: true
            }]
          }
          EOF
          
          # Iniciar aplica√ß√£o com PM2
          pm2 start ecosystem.config.js
          pm2 save
          pm2 startup || true
          
          log "‚úÖ Aplica√ß√£o iniciada com PM2"
          
          # ====================================
          # ETAPA 7: VERIFICA√á√ïES DE SA√öDE
          # ====================================
          log "üöÄ ETAPA 7: Verificando deployment..."
          
          # Aguardar aplica√ß√£o inicializar
          log "‚è≥ Aguardando aplica√ß√£o inicializar..."
          sleep 15
          
          # Verificar se aplica√ß√£o est√° rodando
          if pm2 list | grep -q "supabase-manager.*online"; then
            log "‚úÖ Aplica√ß√£o PM2 est√° online"
          else
            log "‚ùå Aplica√ß√£o PM2 n√£o est√° online"
            pm2 logs supabase-manager --lines 20
            exit 1
          fi
          
          # Verificar se porta est√° ativa
          if lsof -Pi :${{ env.MANAGER_PORT }} -sTCP:LISTEN -t >/dev/null; then
            log "‚úÖ Porta ${{ env.MANAGER_PORT }} est√° ativa"
          else
            log "‚ùå Porta ${{ env.MANAGER_PORT }} n√£o est√° ativa"
            exit 1
          fi
          
          # Health check HTTP
          HEALTH_CHECK_ATTEMPTS=0
          MAX_ATTEMPTS=10
          
          while [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            if curl -f -s http://localhost:${{ env.MANAGER_PORT }}/api/health >/dev/null 2>&1; then
              log "‚úÖ Health check HTTP: OK"
              break
            else
              HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
              log "‚è≥ Tentativa $HEALTH_CHECK_ATTEMPTS/$MAX_ATTEMPTS - Aguardando health check..."
              sleep 5
            fi
          done
          
          if [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            log "‚ùå Health check falhou ap√≥s $MAX_ATTEMPTS tentativas"
            pm2 logs supabase-manager --lines 20
            exit 1
          fi
          
          # Verificar se consegue listar inst√¢ncias
          if curl -f -s http://localhost:${{ env.MANAGER_PORT }}/api/instances >/dev/null 2>&1; then
            log "‚úÖ API de inst√¢ncias: OK"
          else
            log "‚ùå API de inst√¢ncias: FALHOU"
            exit 1
          fi
          
          # ====================================
          # ETAPA 8: CONFIGURAR NGINX (OPCIONAL)
          # ====================================
          log "üöÄ ETAPA 8: Configurando proxy reverso..."
          
          # Instalar Nginx se n√£o existir
          if ! command -v nginx >/dev/null 2>&1; then
            log "üì¶ Instalando Nginx..."
            apt-get install -y nginx
          fi
          
          # Criar configura√ß√£o Nginx
          cat > /etc/nginx/sites-available/supabase-manager << EOF
          server {
              listen 80;
              server_name ${{ env.VPS_HOST }};
              
              # Dashboard principal
              location / {
                  proxy_pass http://localhost:${{ env.MANAGER_PORT }};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_read_timeout 300s;
                  proxy_connect_timeout 300s;
              }
              
              # Proxy para inst√¢ncias Supabase (portas 8100-8199)
              location ~ ^/instance-(\d+)/(.*) {
                  set \$instance_port 8\$1;
                  proxy_pass http://localhost:\$instance_port/\$2\$is_args\$args;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_read_timeout 300s;
                  proxy_connect_timeout 300s;
              }
          }
          EOF
          
          # Ativar configura√ß√£o
          ln -sf /etc/nginx/sites-available/supabase-manager /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          
          # Testar e recarregar Nginx
          if nginx -t 2>/dev/null; then
            systemctl reload nginx
            log "‚úÖ Nginx configurado e recarregado"
          else
            log "‚ùå Erro na configura√ß√£o Nginx"
            nginx -t
          fi
          
          # ====================================
          # ETAPA 9: RESULTADO FINAL
          # ====================================
          log "üöÄ ETAPA 9: Finalizando deployment..."
          
          # Mostrar status final
          log "üìã Status dos servi√ßos:"
          log "   - PM2: $(pm2 list | grep supabase-manager | awk '{print $10}')"
          log "   - Nginx: $(systemctl is-active nginx)"
          log "   - Docker: $(systemctl is-active docker)"
          
          # Mostrar inst√¢ncias ativas
          ACTIVE_INSTANCES=$(ls $APP_DIR/supabase-core/docker-compose-*.yml 2>/dev/null | wc -l)
          log "   - Inst√¢ncias Supabase: $ACTIVE_INSTANCES"
          
          # Mostrar logs recentes
          log "üìã Logs recentes da aplica√ß√£o:"
          pm2 logs supabase-manager --lines 10 --nostream
          
          log "üéâ DEPLOY DO SUPABASE INSTANCE MANAGER CONCLU√çDO COM SUCESSO!"
          log ""
          log "üåê Aplica√ß√£o dispon√≠vel em:"
          log "   - Dashboard Principal: http://${{ env.VPS_HOST }} (Interface de Gerenciamento)"
          log "   - API Direta: http://${{ env.VPS_HOST }}:${{ env.MANAGER_PORT }}"
          log "   - Health Check: http://${{ env.VPS_HOST }}/api/health"
          log ""
          log "üéÆ Como usar:"
          log "   1. Acesse: http://${{ env.VPS_HOST }}"
          log "   2. Clique em 'Criar Novo Projeto'"
          log "   3. Informe o nome do projeto"
          log "   4. Aguarde a cria√ß√£o (30-60 segundos)"
          log "   5. Acesse o Studio via link fornecido"
          log ""
          log "üìä Recursos dispon√≠veis:"
          log "   - M√°ximo de inst√¢ncias: 20"
          log "   - Portas Kong: 8100-8199"
          log "   - Portas PostgreSQL: 5500-5599"
          log "   - Portas Analytics: 4100-4199"
          log ""
          log "üîß Comandos √∫teis:"
          log "   - Ver logs: pm2 logs supabase-manager"
          log "   - Restart: pm2 restart supabase-manager"
          log "   - Status: pm2 status"
          log ""
          log "üéØ Seu Supabase Cloud privado est√° funcionando!"