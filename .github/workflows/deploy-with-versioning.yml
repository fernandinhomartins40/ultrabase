name: üöÄ Deploy Ultrabase com Versionamento

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Tipo de deploy'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - backup-only
        - verify-only
      backup_retention:
        description: 'Quantos backups manter (padr√£o: 10)'
        required: false
        default: '10'
      force_deploy:
        description: 'For√ßar deploy mesmo se verifica√ß√µes falharem'
        required: false
        default: false
        type: boolean

env:
  VPS_HOST: '82.25.69.57'
  VPS_USER: 'root'
  APP_DIR: '/opt/supabase-manager'
  BACKUP_DIR: '/opt/supabase-manager-backups'

jobs:
  pre-deploy-checks:
    name: üîç Verifica√ß√µes Pr√©-Deploy
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
      version_tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: üè∑Ô∏è Gerar tag de vers√£o
      id: version
      run: |
        VERSION_TAG="v$(date +%Y%m%d_%H%M%S)_$(git rev-parse --short HEAD)"
        echo "tag=$VERSION_TAG" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Vers√£o: $VERSION_TAG"
    
    - name: üîç Verificar altera√ß√µes
      id: checks
      run: |
        # Verificar se h√° altera√ß√µes significativas
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Deploy manual solicitado"
        else
          # Verificar se h√° arquivos importantes alterados
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "üìÅ Arquivos alterados:"
          echo "$CHANGED_FILES"
          
          # Definir se deve fazer deploy baseado nos arquivos alterados
          if echo "$CHANGED_FILES" | grep -E "(src/|supabase-core/|package\.json|Dockerfile)" > /dev/null; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Altera√ß√µes detectadas que requerem deploy"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Apenas documenta√ß√£o ou arquivos menores alterados"
          fi
        fi

  backup-and-deploy:
    name: üöÄ Backup e Deploy
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v3
    
    - name: üîë Configurar SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: üìã Verificar status do sistema
      run: |
        echo "üîç Verificando status atual do sistema..."
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== STATUS DO SISTEMA ==='
          echo 'PM2 Status:'
          pm2 list || echo 'PM2 n√£o instalado/configurado'
          echo ''
          echo 'Docker Status:'
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | head -10
          echo ''
          echo 'Uso do disco:'
          df -h | grep -E '/$|/opt'
          echo ''
          echo 'Inst√¢ncias existentes:'
          if [ -f ${{ env.APP_DIR }}/src/instances.json ]; then
            cat ${{ env.APP_DIR }}/src/instances.json | jq -r 'keys[]' 2>/dev/null || echo 'Arquivo instances.json existe mas n√£o √© JSON v√°lido'
          else
            echo 'Nenhuma inst√¢ncia encontrada'
          fi
        "
    
    - name: üöÄ Executar deploy com versionamento
      env:
        VERSION_TAG: ${{ needs.pre-deploy-checks.outputs.version_tag }}
        DEPLOY_TYPE: ${{ github.event.inputs.deploy_type || 'deploy' }}
        BACKUP_RETENTION: ${{ github.event.inputs.backup_retention || '10' }}
      run: |
        # Copiar script de deploy para o servidor
        scp scripts/deploy-versioning.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/deploy-versioning.sh
        
        # Executar deploy
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          chmod +x /tmp/deploy-versioning.sh
          export VERSION_TAG='$VERSION_TAG'
          export VPS_HOST='${{ env.VPS_HOST }}'
          export VPS_USER='${{ env.VPS_USER }}'
          
          case '$DEPLOY_TYPE' in
            'backup-only')
              echo 'üì¶ Executando apenas backup...'
              /tmp/deploy-versioning.sh backup
              ;;
            'verify-only')
              echo 'üîç Executando apenas verifica√ß√£o...'
              /tmp/deploy-versioning.sh verify
              ;;
            *)
              echo 'üöÄ Executando deploy completo...'
              /tmp/deploy-versioning.sh deploy
              ;;
          esac
        "
    
    - name: üß™ Testes p√≥s-deploy
      if: github.event.inputs.deploy_type != 'backup-only'
      run: |
        echo "üß™ Executando testes p√≥s-deploy..."
        
        # Aguardar sistema estabilizar
        sleep 30
        
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo '=== TESTES P√ìS-DEPLOY ==='
          
          # Teste 1: Health check da aplica√ß√£o
          echo 'üîç Teste 1: Health check da aplica√ß√£o'
          if curl -f http://localhost:3080/api/health >/dev/null 2>&1; then
            echo '‚úÖ Aplica√ß√£o respondendo corretamente'
          else
            echo '‚ùå Aplica√ß√£o n√£o est√° respondendo'
            exit 1
          fi
          
          # Teste 2: Verificar se PM2 est√° rodando
          echo 'üîç Teste 2: Verificar PM2'
          if pm2 list | grep -q supabase-manager; then
            echo '‚úÖ PM2 rodando corretamente'
          else
            echo '‚ùå PM2 n√£o est√° rodando'
            exit 1
          fi
          
          # Teste 3: Verificar se Docker est√° funcionando
          echo 'üîç Teste 3: Verificar Docker'
          if docker version >/dev/null 2>&1; then
            echo '‚úÖ Docker funcionando'
          else
            echo '‚ùå Docker n√£o est√° funcionando'
            exit 1
          fi
          
          # Teste 4: Verificar se inst√¢ncias existentes ainda funcionam
          echo 'üîç Teste 4: Verificar inst√¢ncias existentes'
          if [ -f ${{ env.APP_DIR }}/src/instances.json ] && [ -s ${{ env.APP_DIR }}/src/instances.json ]; then
            instances_count=\$(cat ${{ env.APP_DIR }}/src/instances.json | jq 'length' 2>/dev/null || echo '0')
            echo \"üìä Inst√¢ncias preservadas: \$instances_count\"
            if [ \"\$instances_count\" -gt 0 ]; then
              echo '‚úÖ Inst√¢ncias preservadas com sucesso'
            fi
          else
            echo '‚ÑπÔ∏è Nenhuma inst√¢ncia existente encontrada'
          fi
          
          # Teste 5: Verificar logs
          echo 'üîç Teste 5: Verificar logs'
          if pm2 logs supabase-manager --lines 5 --nostream | grep -v 'PM2' | tail -5; then
            echo '‚úÖ Logs acess√≠veis'
          else
            echo '‚ùå Problemas para acessar logs'
          fi
          
          echo 'üéâ Todos os testes passaram!'
        "
    
    - name: üßπ Limpeza de backups antigos
      if: always()
      run: |
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo 'üßπ Limpando backups antigos...'
          /tmp/deploy-versioning.sh cleanup ${{ github.event.inputs.backup_retention || '10' }}
        "
    
    - name: üìä Relat√≥rio final
      if: always()
      run: |
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          echo 'üìä RELAT√ìRIO FINAL DO DEPLOY'
          echo '================================'
          echo 'Vers√£o implementada: ${{ needs.pre-deploy-checks.outputs.version_tag }}'
          echo 'Data/Hora: $(date)'
          echo 'Tipo de deploy: ${{ github.event.inputs.deploy_type || 'deploy' }}'
          echo ''
          echo 'Status dos servi√ßos:'
          pm2 list --no-colors | grep -E 'name|supabase-manager' || echo 'PM2 n√£o encontrado'
          echo ''
          echo 'Containers Docker ativos:'
          docker ps --format 'table {{.Names}}\t{{.Status}}' | grep supabase | head -5 || echo 'Nenhum container Supabase encontrado'
          echo ''
          echo 'Backups dispon√≠veis:'
          ls -la ${{ env.BACKUP_DIR }}/ 2>/dev/null | tail -5 || echo 'Diret√≥rio de backup n√£o encontrado'
          echo ''
          echo 'Uso do disco:'
          df -h | grep -E '/$|/opt'
          echo ''
          echo 'üéØ URLs dispon√≠veis:'
          echo 'Dashboard: http://${{ env.VPS_HOST }}/'
          echo 'API Health: http://${{ env.VPS_HOST }}/api/health'
          echo 'Direto por porta: http://${{ env.VPS_HOST }}:3080/'
          echo ''
          echo '‚úÖ Deploy finalizado!'
        "

  rollback-on-failure:
    name: üîÑ Rollback em caso de falha
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, backup-and-deploy]
    if: failure() && needs.pre-deploy-checks.outputs.should_deploy == 'true'
    
    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v3
    
    - name: üîë Configurar SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
    
    - name: üîÑ Executar rollback autom√°tico
      run: |
        echo "‚ùå Deploy falhou! Iniciando rollback autom√°tico..."
        
        # Copiar script de deploy para o servidor
        scp scripts/deploy-versioning.sh ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/deploy-versioning.sh
        
        ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} "
          chmod +x /tmp/deploy-versioning.sh
          export VPS_HOST='${{ env.VPS_HOST }}'
          export VPS_USER='${{ env.VPS_USER }}'
          
          echo 'üîÑ Executando rollback para vers√£o anterior...'
          /tmp/deploy-versioning.sh rollback
        "
    
    - name: üö® Notificar falha e rollback
      if: always()
      run: |
        echo "üö® DEPLOY FALHOU E ROLLBACK FOI EXECUTADO"
        echo "Por favor, verifique os logs e a aplica√ß√£o manualmente."
        echo "Dashboard: http://${{ env.VPS_HOST }}/" 