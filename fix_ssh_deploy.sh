#!/bin/bash

# üîß Script de Corre√ß√£o Autom√°tica SSH para Deploy
# Execute este script no seu VPS: bash fix_ssh_deploy.sh

set -e  # Parar se houver erro

echo "üîß CORRIGINDO CONFIGURA√á√ÉO SSH PARA DEPLOY..."
echo "=============================================="

# Fun√ß√£o de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Backup do arquivo de configura√ß√£o SSH
SSH_CONFIG="/etc/ssh/sshd_config"
BACKUP_FILE="/etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)"

if [ -f "$SSH_CONFIG" ]; then
    log "üìÑ Fazendo backup da configura√ß√£o SSH..."
    cp "$SSH_CONFIG" "$BACKUP_FILE"
    log "‚úÖ Backup salvo em: $BACKUP_FILE"
else
    log "‚ùå Arquivo de configura√ß√£o SSH n√£o encontrado!"
    exit 1
fi

# 1. Habilitar autentica√ß√£o por senha
log "üîë Configurando autentica√ß√£o por senha..."
if grep -q "^PasswordAuthentication" "$SSH_CONFIG"; then
    sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' "$SSH_CONFIG"
    log "‚úÖ PasswordAuthentication atualizado"
else
    echo "PasswordAuthentication yes" >> "$SSH_CONFIG"
    log "‚úÖ PasswordAuthentication adicionado"
fi

# 2. Permitir login root
log "üë§ Configurando login root..."
if grep -q "^PermitRootLogin" "$SSH_CONFIG"; then
    sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' "$SSH_CONFIG"
    log "‚úÖ PermitRootLogin atualizado"
else
    echo "PermitRootLogin yes" >> "$SSH_CONFIG"
    log "‚úÖ PermitRootLogin adicionado"
fi

# 3. Habilitar autentica√ß√£o por chave p√∫blica (para futuro)
log "üîê Configurando autentica√ß√£o por chave p√∫blica..."
if grep -q "^PubkeyAuthentication" "$SSH_CONFIG"; then
    sed -i 's/^PubkeyAuthentication.*/PubkeyAuthentication yes/' "$SSH_CONFIG"
    log "‚úÖ PubkeyAuthentication atualizado"
else
    echo "PubkeyAuthentication yes" >> "$SSH_CONFIG"
    log "‚úÖ PubkeyAuthentication adicionado"
fi

# 4. Configurar outras op√ß√µes importantes
log "‚öôÔ∏è Configurando op√ß√µes adicionais..."

# Habilitar autentica√ß√£o por teclado (para compatibilidade)
if ! grep -q "^KbdInteractiveAuthentication" "$SSH_CONFIG"; then
    echo "KbdInteractiveAuthentication yes" >> "$SSH_CONFIG"
    log "‚úÖ KbdInteractiveAuthentication adicionado"
fi

# Desabilitar GSS API (pode causar problemas)
if ! grep -q "^GSSAPIAuthentication" "$SSH_CONFIG"; then
    echo "GSSAPIAuthentication no" >> "$SSH_CONFIG"
    log "‚úÖ GSSAPIAuthentication desabilitado"
fi

# 5. Verificar se usu√°rio root tem senha
log "üîç Verificando senha do usu√°rio root..."
if passwd -S root 2>/dev/null | grep -q " P "; then
    log "‚úÖ Usu√°rio root j√° tem senha configurada"
else
    log "‚ö†Ô∏è Configurando senha para usu√°rio root..."
    echo "root:UltrabaseVPS2024!" | chpasswd
    log "‚úÖ Senha tempor√°ria configurada para root"
    log "üîî IMPORTANTE: Altere a senha com 'passwd root'"
fi

# 6. Configurar firewall
log "üõ°Ô∏è Configurando firewall..."
if command -v ufw >/dev/null 2>&1; then
    # Permitir SSH
    ufw allow 22/tcp >/dev/null 2>&1 || true
    log "‚úÖ Porta SSH (22) permitida no UFW"
    
    # Permitir portas do Ultrabase
    ufw allow 3080/tcp >/dev/null 2>&1 || true  # Manager
    ufw allow 8100:8199/tcp >/dev/null 2>&1 || true  # Kong HTTP
    ufw allow 5500:5599/tcp >/dev/null 2>&1 || true  # PostgreSQL
    
    log "‚úÖ Portas do Ultrabase permitidas no UFW"
else
    log "‚ÑπÔ∏è UFW n√£o est√° instalado"
fi

# 7. Reiniciar servi√ßo SSH
log "üîÑ Reiniciando servi√ßo SSH..."
systemctl restart sshd
if systemctl is-active --quiet sshd; then
    log "‚úÖ SSH reiniciado com sucesso"
else
    log "‚ùå Erro ao reiniciar SSH!"
    exit 1
fi

# 8. Testar configura√ß√£o
log "üß™ Testando configura√ß√£o..."
if ss -tlnp | grep -q ":22 "; then
    log "‚úÖ SSH est√° escutando na porta 22"
else
    log "‚ùå SSH n√£o est√° escutando na porta 22"
    exit 1
fi

# 9. Mostrar resumo da configura√ß√£o
echo ""
echo "=============================================="
echo "üìã RESUMO DA CONFIGURA√á√ÉO SSH:"
echo "=============================================="
echo "‚úÖ PasswordAuthentication: $(grep "^PasswordAuthentication" "$SSH_CONFIG" | awk '{print $2}')"
echo "‚úÖ PermitRootLogin: $(grep "^PermitRootLogin" "$SSH_CONFIG" | awk '{print $2}')"
echo "‚úÖ PubkeyAuthentication: $(grep "^PubkeyAuthentication" "$SSH_CONFIG" | awk '{print $2}')"
echo "‚úÖ SSH Service: $(systemctl is-active sshd)"
echo ""

# 10. Instru√ß√µes finais
echo "üéâ CONFIGURA√á√ÉO SSH CORRIGIDA COM SUCESSO!"
echo ""
echo "üìù PR√ìXIMOS PASSOS:"
echo "==================="
echo ""
echo "1. üîê Alterar senha do root (opcional mas recomendado):"
echo "   passwd root"
echo ""
echo "2. üß™ Testar conex√£o SSH localmente:"
echo "   ssh root@82.25.69.57 'echo Conex√£o OK'"
echo ""
echo "3. ‚úÖ Verificar GitHub Secrets:"
echo "   - V√° para: Settings ‚Üí Secrets and variables ‚Üí Actions"
echo "   - Confirme que VPS_PASSWORD existe e est√° correto"
echo ""
echo "4. üöÄ Executar deploy no GitHub Actions"
echo ""
echo "üíæ BACKUP:"
echo "Backup da configura√ß√£o anterior salvo em:"
echo "$BACKUP_FILE"
echo ""
echo "üîÑ Para reverter (se necess√°rio):"
echo "   cp $BACKUP_FILE $SSH_CONFIG"
echo "   systemctl restart sshd"
echo ""
echo "=============================================="

# Opcional: Mostrar informa√ß√µes de conectividade
echo "üåê INFORMA√á√ïES DE CONECTIVIDADE:"
echo "================================"
echo "Host: 82.25.69.57"
echo "Usu√°rio: root"
echo "Porta SSH: 22"
echo "M√©todos de auth: password, publickey"
echo ""

log "‚úÖ Script de corre√ß√£o conclu√≠do!"

# Teste final
echo "üî¨ TESTE FINAL DE CONECTIVIDADE:"
echo "================================"
if nc -z localhost 22 >/dev/null 2>&1; then
    echo "‚úÖ Porta 22 est√° acess√≠vel localmente"
else
    echo "‚ùå Porta 22 n√£o est√° acess√≠vel"
fi

echo ""
echo "üí° Dica: Se ainda tiver problemas, verifique:"
echo "   - Firewall da Hostinger (painel de controle)"
echo "   - Logs do SSH: tail -f /var/log/auth.log"
echo "   - Status do servi√ßo: systemctl status sshd" 