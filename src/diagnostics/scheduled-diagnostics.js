const fs = require('fs').promises;
const path = require('path');

/**
 * Classe para gerenciar configura√ß√µes de agendamento de diagn√≥sticos
 * N√£o executa diagn√≥sticos automaticamente - apenas gera configura√ß√µes para cron externo
 */
class ScheduledDiagnostics {
  constructor() {
    this.schedulesFile = path.join(__dirname, 'diagnostic-schedules.json');
    this.schedules = new Map(); // Cache em mem√≥ria
    this.loadSchedules();
  }

  /**
   * Carrega configura√ß√µes de agendamento do arquivo
   */
  async loadSchedules() {
    try {
      const data = await fs.readFile(this.schedulesFile, 'utf8');
      const schedules = JSON.parse(data);
      
      // Carregar no cache em mem√≥ria
      Object.entries(schedules).forEach(([instanceId, config]) => {
        this.schedules.set(instanceId, config);
      });
      
      console.log(`üìÖ ${this.schedules.size} configura√ß√µes de agendamento carregadas`);
    } catch (error) {
      if (error.code !== 'ENOENT') {
        console.error('‚ùå Erro ao carregar configura√ß√µes de agendamento:', error);
      }
    }
  }

  /**
   * Salva configura√ß√µes de agendamento no arquivo
   */
  async saveSchedules() {
    try {
      const schedulesObj = {};
      this.schedules.forEach((config, instanceId) => {
        schedulesObj[instanceId] = config;
      });
      
      await fs.writeFile(this.schedulesFile, JSON.stringify(schedulesObj, null, 2));
    } catch (error) {
      console.error('‚ùå Erro ao salvar configura√ß√µes de agendamento:', error);
      throw error;
    }
  }

  /**
   * Criar configura√ß√£o de agendamento para uma inst√¢ncia
   */
  async createScheduleConfig(instanceId, options = {}) {
    const {
      interval = '6h',
      enabled = true,
      description = 'Diagn√≥stico autom√°tico agendado',
      notify_on_failure = false,
      max_retries = 2
    } = options;

    const config = {
      instance_id: instanceId,
      interval: interval,
      enabled: enabled,
      description: description,
      notify_on_failure: notify_on_failure,
      max_retries: max_retries,
      command: `curl -H "Authorization: Bearer TOKEN" http://localhost:3080/api/instances/${instanceId}/run-diagnostics`,
      cron_expression: this.intervalToCron(interval),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      last_execution: null,
      execution_count: 0
    };

    this.schedules.set(instanceId, config);
    await this.saveSchedules();

    console.log(`üìÖ Configura√ß√£o de agendamento criada para inst√¢ncia ${instanceId} (${interval})`);
    return config;
  }

  /**
   * Atualizar configura√ß√£o de agendamento existente
   */
  async updateScheduleConfig(instanceId, updates) {
    const existing = this.schedules.get(instanceId);
    if (!existing) {
      throw new Error(`Configura√ß√£o de agendamento n√£o encontrada para inst√¢ncia ${instanceId}`);
    }

    const updatedConfig = {
      ...existing,
      ...updates,
      updated_at: new Date().toISOString()
    };

    // Recriar express√£o cron se o interval foi alterado
    if (updates.interval) {
      updatedConfig.cron_expression = this.intervalToCron(updates.interval);
    }

    // Atualizar comando se necess√°rio
    if (updates.interval || !updatedConfig.command.includes(instanceId)) {
      updatedConfig.command = `curl -H "Authorization: Bearer TOKEN" http://localhost:3080/api/instances/${instanceId}/run-diagnostics`;
    }

    this.schedules.set(instanceId, updatedConfig);
    await this.saveSchedules();

    console.log(`üìÖ Configura√ß√£o de agendamento atualizada para inst√¢ncia ${instanceId}`);
    return updatedConfig;
  }

  /**
   * Remover configura√ß√£o de agendamento
   */
  async removeScheduleConfig(instanceId) {
    const existed = this.schedules.has(instanceId);
    this.schedules.delete(instanceId);
    
    if (existed) {
      await this.saveSchedules();
      console.log(`üìÖ Configura√ß√£o de agendamento removida para inst√¢ncia ${instanceId}`);
    }
    
    return existed;
  }

  /**
   * Obter configura√ß√£o de agendamento de uma inst√¢ncia
   */
  getScheduleConfig(instanceId) {
    return this.schedules.get(instanceId) || null;
  }

  /**
   * Listar todas as configura√ß√µes de agendamento
   */
  getAllScheduleConfigs() {
    return Array.from(this.schedules.entries()).map(([instanceId, config]) => ({
      instance_id: instanceId,
      ...config
    }));
  }

  /**
   * Converter interval para express√£o cron
   */
  intervalToCron(interval) {
    const intervalMap = {
      '15m': '*/15 * * * *',
      '30m': '*/30 * * * *',
      '1h': '0 * * * *',
      '2h': '0 */2 * * *',
      '4h': '0 */4 * * *',
      '6h': '0 */6 * * *',
      '8h': '0 */8 * * *',
      '12h': '0 */12 * * *',
      '24h': '0 0 * * *',
      'daily': '0 0 * * *',
      'weekly': '0 0 * * 0'
    };

    return intervalMap[interval] || '0 */6 * * *'; // Padr√£o: a cada 6 horas
  }

  /**
   * Gerar script de cron para uma inst√¢ncia espec√≠fica
   */
  generateCronScript(instanceId, authToken = 'YOUR_TOKEN_HERE') {
    const config = this.schedules.get(instanceId);
    if (!config) {
      return null;
    }

    const logFile = `/var/log/ultrabase-diagnostic-${instanceId}.log`;
    const command = config.command.replace('TOKEN', authToken);

    return `# Diagn√≥stico autom√°tico para inst√¢ncia ${instanceId}
# Descri√ß√£o: ${config.description}
# Intervalo: ${config.interval}
# Status: ${config.enabled ? 'Ativo' : 'Desabilitado'}
${config.enabled ? '' : '# '}${config.cron_expression} ${command} >> ${logFile} 2>&1`;
  }

  /**
   * Gerar script de cron para todas as inst√¢ncias
   */
  generateFullCronScript(authToken = 'YOUR_TOKEN_HERE') {
    const scripts = [];
    const timestamp = new Date().toISOString();

    scripts.push(`# Ultrabase - Diagn√≥sticos Agendados`);
    scripts.push(`# Gerado automaticamente em: ${timestamp}`);
    scripts.push(`# Total de configura√ß√µes: ${this.schedules.size}`);
    scripts.push('');

    this.schedules.forEach((config, instanceId) => {
      const script = this.generateCronScript(instanceId, authToken);
      if (script) {
        scripts.push(script);
        scripts.push('');
      }
    });

    return scripts.join('\n');
  }

  /**
   * Validar configura√ß√£o de agendamento
   */
  validateScheduleConfig(config) {
    const errors = [];

    if (!config.instance_id) {
      errors.push('instance_id √© obrigat√≥rio');
    }

    if (!config.interval || !this.intervalToCron(config.interval)) {
      errors.push('interval inv√°lido');
    }

    if (typeof config.enabled !== 'boolean') {
      errors.push('enabled deve ser boolean');
    }

    if (config.max_retries && (typeof config.max_retries !== 'number' || config.max_retries < 0)) {
      errors.push('max_retries deve ser um n√∫mero >= 0');
    }

    return errors;
  }

  /**
   * Obter estat√≠sticas de agendamento
   */
  getSchedulingStats() {
    const configs = Array.from(this.schedules.values());
    
    const stats = {
      total_schedules: configs.length,
      enabled_schedules: configs.filter(c => c.enabled).length,
      disabled_schedules: configs.filter(c => !c.enabled).length,
      intervals: {},
      total_executions: configs.reduce((sum, c) => sum + (c.execution_count || 0), 0),
      most_active_instance: null,
      least_active_instance: null
    };

    // Contar intervalos
    configs.forEach(config => {
      stats.intervals[config.interval] = (stats.intervals[config.interval] || 0) + 1;
    });

    // Encontrar inst√¢ncias mais e menos ativas
    if (configs.length > 0) {
      const sorted = configs.sort((a, b) => (b.execution_count || 0) - (a.execution_count || 0));
      stats.most_active_instance = {
        instance_id: sorted[0].instance_id,
        executions: sorted[0].execution_count || 0
      };
      stats.least_active_instance = {
        instance_id: sorted[sorted.length - 1].instance_id,
        executions: sorted[sorted.length - 1].execution_count || 0
      };
    }

    return stats;
  }

  /**
   * Registrar execu√ß√£o de diagn√≥stico agendado
   */
  async recordExecution(instanceId, success = true, error = null) {
    const config = this.schedules.get(instanceId);
    if (!config) {
      return false;
    }

    config.last_execution = {
      timestamp: new Date().toISOString(),
      success: success,
      error: error
    };
    config.execution_count = (config.execution_count || 0) + 1;
    config.updated_at = new Date().toISOString();

    this.schedules.set(instanceId, config);
    await this.saveSchedules();

    return true;
  }
}

module.exports = ScheduledDiagnostics;