/**
 * AUTO REPAIR ENGINE - Motor principal de corre√ß√£o de inst√¢ncias
 * 
 * Executa corre√ß√µes de problemas das inst√¢ncias Supabase baseado em planos
 * criados pelo analisador inteligente.
 */

const IntelligentProblemAnalyzer = require('./intelligent-analyzer');
const ContainerFixer = require('./container-fixer');
const CredentialManager = require('./credential-manager');
const NetworkFixer = require('./network-fixer');
const ServiceFixer = require('./service-fixer');
const BackupManager = require('./backup-manager');
const RollbackManager = require('./rollback-manager');

class AutoRepairEngine {
  constructor(config, instanceManager, diagnostics) {
    this.config = config;
    this.instanceManager = instanceManager;
    this.diagnostics = diagnostics;
    
    // Inicializar componentes especializados
    this.analyzer = new IntelligentProblemAnalyzer();
    this.containerFixer = new ContainerFixer(config);
    this.credentialManager = new CredentialManager(config);
    this.networkFixer = new NetworkFixer(config);
    this.serviceFixer = new ServiceFixer(config);
    this.backupManager = new BackupManager(config);
    this.rollbackManager = new RollbackManager(config);
    
    // Timeouts para opera√ß√µes
    this.timeouts = {
      phase: 300000,        // 5 minutos por fase
      action: 120000,       // 2 minutos por a√ß√£o
      verification: 60000,  // 1 minuto para verifica√ß√£o
      rollback: 180000      // 3 minutos para rollback
    };
  }

  /**
   * Executa corre√ß√£o completa de uma inst√¢ncia (m√©todo principal)
   */
  async executeInstanceRepair(instanceId, options = {}) {
    const operationId = `repair_${instanceId}_${Date.now()}`;
    let backup = null;
    let executionLog = [];

    try {
      console.log(`üîß Iniciando corre√ß√£o autom√°tica da inst√¢ncia ${instanceId}`);
      
      const startTime = Date.now();
      executionLog.push({ 
        timestamp: new Date().toISOString(), 
        action: 'repair_started', 
        details: { instanceId, options, operationId } 
      });

      // 1. Valida√ß√µes iniciais
      const instance = await this.validateInstance(instanceId);
      
      // 2. Executar diagn√≥stico inicial
      console.log(`üìã Executando diagn√≥stico inicial...`);
      const diagnostic = await this.diagnostics.runFullDiagnostic(instanceId);
      
      if (diagnostic.overall_healthy && !options.force) {
        return {
          success: true,
          message: 'Inst√¢ncia j√° est√° saud√°vel - nenhuma corre√ß√£o necess√°ria',
          repair_performed: false,
          diagnostic: diagnostic,
          operation_id: operationId
        };
      }

      // 3. Analisar problemas e criar plano de corre√ß√£o
      console.log(`üîç Analisando problemas e criando plano de corre√ß√£o...`);
      const repairPlan = this.analyzer.analyzeProblemChain(diagnostic);
      
      if (!repairPlan.success || repairPlan.actions.length === 0) {
        return {
          success: false,
          message: 'N√£o foi poss√≠vel criar plano de corre√ß√£o autom√°tica',
          repair_performed: false,
          issues: diagnostic.critical_issues,
          manual_intervention_required: true,
          operation_id: operationId
        };
      }

      console.log(`üìã Plano criado: ${repairPlan.actions.length} a√ß√µes, tempo estimado: ${repairPlan.summary.estimatedDuration}`);
      executionLog.push({ 
        timestamp: new Date().toISOString(), 
        action: 'plan_created', 
        details: repairPlan.summary 
      });

      // 4. Criar backup se solicitado
      if (options.backup !== false) {
        console.log(`üíæ Criando backup da inst√¢ncia...`);
        backup = await this.backupManager.createInstanceBackup(instanceId, 'auto_repair');
        executionLog.push({ 
          timestamp: new Date().toISOString(), 
          action: 'backup_created', 
          details: { backup_id: backup.backup_id } 
        });
      }

      // 5. Executar plano de corre√ß√£o
      console.log(`üöÄ Executando plano de corre√ß√£o...`);
      const repairResults = await this.executePlan(instanceId, repairPlan, executionLog);

      // 6. Verificar resultado final
      console.log(`üîç Verificando resultado da corre√ß√£o...`);
      const finalDiagnostic = await this.diagnostics.runFullDiagnostic(instanceId);
      const repairSuccessful = this.evaluateRepairSuccess(diagnostic, finalDiagnostic);

      const endTime = Date.now();
      const totalDuration = Math.round((endTime - startTime) / 1000);

      if (repairSuccessful) {
        console.log(`‚úÖ Corre√ß√£o da inst√¢ncia ${instanceId} conclu√≠da com sucesso em ${totalDuration}s`);
        
        // Atualizar status da inst√¢ncia
        if (instance) {
          instance.status = 'running';
          instance.updated_at = new Date().toISOString();
          instance.last_repair = new Date().toISOString();
          this.instanceManager.saveInstances();
        }

        return {
          success: true,
          message: `Corre√ß√£o executada com sucesso em ${totalDuration}s`,
          repair_performed: true,
          backup_created: backup?.backup_id || null,
          actions_executed: repairResults.successful,
          actions_failed: repairResults.failed,
          pre_repair_issues: diagnostic.critical_issues.length,
          post_repair_issues: finalDiagnostic.critical_issues.length,
          execution_log: executionLog,
          operation_id: operationId,
          duration_seconds: totalDuration
        };
      } else {
        throw new Error('Corre√ß√£o executada mas problemas persistem');
      }

    } catch (error) {
      console.error(`‚ùå Erro durante corre√ß√£o da inst√¢ncia ${instanceId}:`, error);
      
      executionLog.push({ 
        timestamp: new Date().toISOString(), 
        action: 'repair_failed', 
        details: { error: error.message } 
      });

      // Tentar rollback se temos backup
      if (backup && options.autoRollback !== false) {
        try {
          console.log(`üîÑ Executando rollback autom√°tico...`);
          await this.rollbackManager.performRollback(instanceId, backup.backup_id);
          
          executionLog.push({ 
            timestamp: new Date().toISOString(), 
            action: 'rollback_completed', 
            details: { backup_id: backup.backup_id } 
          });

          return {
            success: false,
            message: `Erro na corre√ß√£o, rollback executado: ${error.message}`,
            repair_performed: false,
            rollback_performed: true,
            backup_used: backup.backup_id,
            execution_log: executionLog,
            operation_id: operationId,
            error: error.message
          };
        } catch (rollbackError) {
          console.error(`‚ùå Erro cr√≠tico no rollback:`, rollbackError);
          
          return {
            success: false,
            message: 'ERRO CR√çTICO: Falha na corre√ß√£o E no rollback',
            repair_performed: false,
            rollback_performed: false,
            backup_available: backup.backup_id,
            execution_log: executionLog,
            operation_id: operationId,
            error: error.message,
            rollback_error: rollbackError.message,
            manual_recovery_required: true
          };
        }
      }

      return {
        success: false,
        message: `Erro na corre√ß√£o: ${error.message}`,
        repair_performed: false,
        backup_available: backup?.backup_id || null,
        execution_log: executionLog,
        operation_id: operationId,
        error: error.message
      };
    }
  }

  /**
   * Executa plano de corre√ß√£o fase por fase
   */
  async executePlan(instanceId, repairPlan, executionLog) {
    const results = {
      successful: [],
      failed: [],
      skipped: []
    };

    // Executar a√ß√µes por fase (respeitando depend√™ncias)
    const phases = Object.keys(repairPlan.phases);
    
    for (const phaseName of phases) {
      const phaseActions = repairPlan.phases[phaseName];
      
      if (phaseActions.length === 0) continue;

      console.log(`üìã Executando fase: ${phaseName} (${phaseActions.length} a√ß√µes)`);
      
      executionLog.push({ 
        timestamp: new Date().toISOString(), 
        action: 'phase_started', 
        details: { phase: phaseName, actions: phaseActions.length } 
      });

      try {
        // Executar a√ß√µes da fase
        for (const action of phaseActions) {
          try {
            console.log(`üîß Executando: ${action.description}`);
            
            const actionResult = await Promise.race([
              this.executeAction(instanceId, action),
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Action timeout')), this.timeouts.action)
              )
            ]);

            results.successful.push({
              action: action.type,
              description: action.description,
              result: actionResult,
              duration: actionResult.duration || 0
            });

            executionLog.push({ 
              timestamp: new Date().toISOString(), 
              action: 'action_completed', 
              details: { type: action.type, description: action.description } 
            });

            // Pausa entre a√ß√µes para evitar sobrecarga
            await new Promise(resolve => setTimeout(resolve, 2000));

          } catch (actionError) {
            console.error(`‚ùå Falha na a√ß√£o ${action.type}:`, actionError.message);
            
            results.failed.push({
              action: action.type,
              description: action.description,
              error: actionError.message
            });

            executionLog.push({ 
              timestamp: new Date().toISOString(), 
              action: 'action_failed', 
              details: { type: action.type, error: actionError.message } 
            });

            // Se a√ß√£o cr√≠tica falhou, parar execu√ß√£o
            if (action.critical) {
              throw new Error(`A√ß√£o cr√≠tica falhou: ${action.description} - ${actionError.message}`);
            }
          }
        }

        // Verificar sa√∫de ap√≥s cada fase
        console.log(`üîç Verificando sa√∫de ap√≥s fase ${phaseName}...`);
        const phaseCheck = await this.diagnostics.quickHealthCheck(instanceId);
        
        executionLog.push({ 
          timestamp: new Date().toISOString(), 
          action: 'phase_health_check', 
          details: { phase: phaseName, healthy: phaseCheck.healthy } 
        });

        console.log(`‚úÖ Fase ${phaseName} conclu√≠da`);

      } catch (phaseError) {
        console.error(`‚ùå Falha na fase ${phaseName}:`, phaseError.message);
        
        executionLog.push({ 
          timestamp: new Date().toISOString(), 
          action: 'phase_failed', 
          details: { phase: phaseName, error: phaseError.message } 
        });

        throw phaseError; // Propagar erro para n√≠vel superior
      }

      // Pausa entre fases
      await new Promise(resolve => setTimeout(resolve, 5000));
    }

    return results;
  }

  /**
   * Executa uma a√ß√£o espec√≠fica de corre√ß√£o
   */
  async executeAction(instanceId, action) {
    const startTime = Date.now();

    try {
      let result;

      switch (action.method) {
        case 'fixStoppedContainers':
          result = await this.containerFixer.fixStoppedContainers(instanceId, action.parameters);
          break;

        case 'fixDatabaseCredentials':
          result = await this.credentialManager.regenerateCredentials(instanceId, action.parameters);
          break;

        case 'restartDatabaseContainer':
          result = await this.containerFixer.restartDatabaseContainer(instanceId, action.parameters);
          break;

        case 'fixNetworkConnectivity':
          result = await this.networkFixer.fixConnectivity(instanceId, action.parameters);
          break;

        case 'restartAuthService':
          result = await this.serviceFixer.restartAuthService(instanceId, action.parameters);
          break;

        case 'restartHttpServices':
          result = await this.serviceFixer.restartHttpServices(instanceId, action.parameters);
          break;

        default:
          throw new Error(`M√©todo de corre√ß√£o desconhecido: ${action.method}`);
      }

      const duration = Date.now() - startTime;
      
      return {
        success: true,
        result: result,
        duration: Math.round(duration / 1000),
        message: `${action.description} executada com sucesso`
      };

    } catch (error) {
      const duration = Date.now() - startTime;
      
      throw new Error(`${action.description} falhou ap√≥s ${Math.round(duration / 1000)}s: ${error.message}`);
    }
  }

  /**
   * Valida se inst√¢ncia existe e est√° acess√≠vel
   */
  async validateInstance(instanceId) {
    const instance = this.instanceManager.instances[instanceId];
    
    if (!instance) {
      throw new Error(`Inst√¢ncia ${instanceId} n√£o encontrada`);
    }

    if (instance.status === 'creating') {
      throw new Error(`Inst√¢ncia ${instanceId} ainda est√° sendo criada`);
    }

    return instance;
  }

  /**
   * Avalia se a corre√ß√£o foi bem-sucedida
   */
  evaluateRepairSuccess(beforeDiagnostic, afterDiagnostic) {
    // Corre√ß√£o bem-sucedida se:
    // 1. Inst√¢ncia est√° saud√°vel OU
    // 2. N√∫mero de problemas cr√≠ticos diminuiu significativamente
    
    const wasHealthy = beforeDiagnostic.overall_healthy;
    const isHealthy = afterDiagnostic.overall_healthy;
    
    if (isHealthy) {
      return true; // Inst√¢ncia agora est√° completamente saud√°vel
    }

    const beforeIssues = beforeDiagnostic.critical_issues.length;
    const afterIssues = afterDiagnostic.critical_issues.length;
    
    // Se reduziu pelo menos 70% dos problemas cr√≠ticos
    const improvementRatio = (beforeIssues - afterIssues) / beforeIssues;
    return improvementRatio >= 0.7;
  }

  /**
   * Obt√©m status atual de uma opera√ß√£o de corre√ß√£o
   */
  async getRepairStatus(operationId) {
    // Em implementa√ß√£o futura, isso consultaria um banco de dados
    // ou cache para status de opera√ß√µes em andamento
    return {
      operation_id: operationId,
      status: 'completed', // ou 'running', 'failed'
      progress: 100,
      message: 'Status n√£o implementado ainda'
    };
  }

  /**
   * Cancela uma opera√ß√£o de corre√ß√£o em andamento
   */
  async cancelRepair(operationId) {
    // Em implementa√ß√£o futura, isso sinalizaria para parar
    // a opera√ß√£o de corre√ß√£o em andamento
    return {
      success: false,
      message: 'Cancelamento n√£o implementado ainda'
    };
  }
}

module.exports = AutoRepairEngine;