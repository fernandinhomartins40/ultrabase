user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=dashboard:10m rate=5r/s;

    # Upstream para o gerenciador
    upstream supabase_manager {
        server host.docker.internal:3080 max_fails=3 fail_timeout=30s;
        server localhost:3080 backup max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Resolver DNS para Docker
    resolver 127.0.0.11 valid=30s;

    # Servidor principal
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Dashboard principal do gerenciador
        location / {
            limit_req zone=dashboard burst=20 nodelay;
            
            proxy_pass http://supabase_manager;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            
            # Configurações de retry
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Tratar erros
            proxy_intercept_errors on;
            error_page 502 503 504 = @backend_error;
        }

        # API do gerenciador
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://supabase_manager;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            
            # Configurações de retry
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Tratar erros
            proxy_intercept_errors on;
            error_page 502 503 504 = @api_error;
        }

        # Handler para erros do backend
        location @backend_error {
            return 503 '<!DOCTYPE html>
<html>
<head>
    <title>Serviço Temporariamente Indisponível</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
        .error { color: #e74c3c; }
        .info { color: #3498db; margin-top: 20px; }
    </style>
</head>
<body>
    <h1 class="error">Serviço Temporariamente Indisponível</h1>
    <p>O Supabase Instance Manager está iniciando. Aguarde alguns segundos e tente novamente.</p>
    <p class="info">Se o problema persistir, verifique os logs do Docker.</p>
    <script>
        setTimeout(function() { window.location.reload(); }, 10000);
    </script>
</body>
</html>';
            add_header Content-Type text/html;
        }

        # Handler para erros da API
        location @api_error {
            return 503 '{"error": "Serviço temporariamente indisponível", "code": "SERVICE_UNAVAILABLE", "message": "O backend está iniciando. Tente novamente em alguns segundos."}';
            add_header Content-Type application/json;
        }

        # Health check
        location /health {
            access_log off;
            return 200 'OK';
            add_header Content-Type text/plain;
        }

        # Negar acesso a arquivos sensíveis
        location ~ /\. {
            deny all;
        }

        location ~ /(instances\.json|logs/.*) {
            deny all;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Proxy para instâncias Supabase individuais
    # Permite acesso direto às instâncias via subdomínios ou paths específicos
    server {
        listen 80;
        server_name ~^instance-(?<instance_id>\d+)\.(.+)$;
        
        # Security headers
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        
        location / {
            # Calcular porta baseado no ID da instância (8100 + ID)
            set $instance_port 8$instance_id;
            
            # Verificar se porta está no range válido (8100-8199)
            if ($instance_port !~ ^8[0-1][0-9][0-9]$) {
                return 404;
            }
            
            proxy_pass http://host.docker.internal:$instance_port;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            
            # Tratar erros de conexão
            proxy_intercept_errors on;
            error_page 502 503 504 = @instance_error;
        }

        location @instance_error {
            return 503 '{"error": "Instância não disponível", "instance_id": "$instance_id"}';
            add_header Content-Type application/json;
        }
    }

    # Fallback para configurações HTTPS (se SSL estiver configurado)
    # server {
    #     listen 443 ssl http2;
    #     server_name _;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # Same location blocks as HTTP server
    #     # ...
    # }
}