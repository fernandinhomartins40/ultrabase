#!/bin/bash

# Script para deploy manual com versionamento - Ultrabase
# Usa a mesma l√≥gica do GitHub Actions mas executado localmente

set -e

VPS_HOST="82.25.69.57"
VPS_USER="root"
DEPLOY_DIR="/opt/supabase-manager"
BACKUP_DIR="/opt/supabase-manager-backups"
VERSION_TAG="v$(date +%Y%m%d_%H%M%S)_manual"

echo "üöÄ DEPLOY MANUAL COM VERSIONAMENTO - Ultrabase"
echo "=============================================="
echo "Vers√£o: $VERSION_TAG"
echo "Servidor: $VPS_HOST"
echo "=============================================="

# Usar sshpass se dispon√≠vel, sen√£o pedir senha
if command -v sshpass >/dev/null 2>&1; then
    echo "‚ÑπÔ∏è  Use: export VPS_PASSWORD='sua_senha' && bash manual_deploy.sh"
    if [ -z "$VPS_PASSWORD" ]; then
        read -s -p "Digite a senha SSH: " VPS_PASSWORD
        echo
    fi
    SSH_CMD="sshpass -p '$VPS_PASSWORD' ssh -o StrictHostKeyChecking=no"
else
    echo "‚ÑπÔ∏è  Digite a senha SSH quando solicitado"
    SSH_CMD="ssh -o StrictHostKeyChecking=no"
fi

echo "üì° Conectando ao servidor..."

$SSH_CMD $VPS_USER@$VPS_HOST << 'DEPLOY_SCRIPT'

# ============================================================================
# SISTEMA DE DEPLOY COM VERSIONAMENTO - ULTRABASE (MANUAL)
# ============================================================================

set -euo pipefail

# Cores para logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}" >&2
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
    exit 1
}

# Configura√ß√µes
DEPLOY_DIR="/opt/supabase-manager"
BACKUP_DIR="/opt/supabase-manager-backups"
VERSION_TAG="v$(date +%Y%m%d_%H%M%S)_manual"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

log "üöÄ Iniciando deploy manual com versionamento - Vers√£o: $VERSION_TAG"

# ============================================================================
# ETAPA 1: DIAGN√ìSTICO INICIAL
# ============================================================================

log "üîç ETAPA 1: Diagn√≥stico do sistema atual..."

# Verificar se Docker est√° rodando
if ! docker info >/dev/null 2>&1; then
    error "Docker n√£o est√° rodando"
fi

# Verificar containers atuais
log "üì¶ Containers ativos:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true

# Verificar se nginx est√° rodando
if pgrep nginx > /dev/null; then
    log "‚úÖ Nginx est√° rodando"
else
    warn "‚ö†Ô∏è Nginx n√£o est√° rodando"
fi

# Verificar se PM2 est√° rodando
if command -v pm2 >/dev/null 2>&1; then
    log "üìã Processos PM2:"
    pm2 list || true
else
    warn "‚ö†Ô∏è PM2 n√£o est√° instalado"
fi

# Verificar portas em uso
log "üåê Portas em uso:"
netstat -tlnp | grep -E ':(80|443|3080)' || echo "Nenhuma porta relevante em uso"

log "‚úÖ Diagn√≥stico inicial conclu√≠do"

# ============================================================================
# ETAPA 2: BACKUP COMPLETO
# ============================================================================

log "üì¶ ETAPA 2: Criando backup completo..."

BACKUP_PATH="$BACKUP_DIR/$VERSION_TAG"
mkdir -p "$BACKUP_PATH"

# Parar aplica√ß√£o temporariamente
log "‚è∏Ô∏è Parando aplica√ß√£o para backup consistente..."
if command -v pm2 >/dev/null 2>&1; then
    pm2 stop supabase-manager 2>/dev/null || true
fi

# Parar containers Docker
log "‚è∏Ô∏è Parando containers Docker..."
docker compose -f $DEPLOY_DIR/src/docker/docker-compose.production.yml down 2>/dev/null || true

# Backup do c√≥digo da aplica√ß√£o
if [ -d "$DEPLOY_DIR" ]; then
    log "üìÅ Backup do c√≥digo da aplica√ß√£o..."
    tar -czf "$BACKUP_PATH/application-code.tar.gz" -C "$DEPLOY_DIR" . 2>/dev/null || true
fi

# Backup das inst√¢ncias
if [ -f "$DEPLOY_DIR/src/instances.json" ]; then
    log "üìã Backup das configura√ß√µes de inst√¢ncias..."
    cp "$DEPLOY_DIR/src/instances.json" "$BACKUP_PATH/instances.json"
fi

# Criar manifesto do backup
cat > "$BACKUP_PATH/backup-manifest.json" << EOF
{
    "timestamp": "$TIMESTAMP",
    "version": "$VERSION_TAG",
    "backup_type": "manual_full",
    "deploy_reason": "fix_502_error"
}
EOF

log "‚úÖ Backup completo criado: $BACKUP_PATH"

# ============================================================================
# ETAPA 3: ATUALIZAR C√ìDIGO
# ============================================================================

log "üöÄ ETAPA 3: Atualizando c√≥digo..."

cd "$DEPLOY_DIR"

# Atualizar reposit√≥rio
if [ -d ".git" ]; then
    log "üîÑ Atualizando reposit√≥rio..."
    git fetch origin
    git reset --hard origin/main
    git clean -fd
else
    log "üÜï Clonando reposit√≥rio..."
    rm -rf * .* 2>/dev/null || true
    git clone https://github.com/fernandinhomartins40/ultrabase.git . || {
        error "Falha ao clonar reposit√≥rio"
    }
fi

# Restaurar inst√¢ncias se existirem
if [ -f "$BACKUP_PATH/instances.json" ]; then
    cp "$BACKUP_PATH/instances.json" src/instances.json
    log "‚úÖ Configura√ß√µes de inst√¢ncias restauradas"
fi

# Instalar depend√™ncias
cd src
log "üì¶ Instalando depend√™ncias NPM..."
npm install --production

log "‚úÖ C√≥digo atualizado"

# ============================================================================
# ETAPA 4: CORRIGIR CONFIGURA√á√ïES DOCKER
# ============================================================================

log "üîß ETAPA 4: Corrigindo configura√ß√µes Docker..."

cd "$DEPLOY_DIR/src/docker"

# Verificar se arquivos existem
if [ ! -f "docker-compose.production.yml" ]; then
    error "docker-compose.production.yml n√£o encontrado"
fi

if [ ! -f "nginx.conf" ]; then
    error "nginx.conf n√£o encontrado"
fi

log "‚úÖ Arquivos de configura√ß√£o encontrados"

# ============================================================================
# ETAPA 5: REINICIAR SERVI√áOS COM NOVA CONFIGURA√á√ÉO
# ============================================================================

log "üîÑ ETAPA 5: Reiniciando servi√ßos..."

# Instalar PM2 se necess√°rio
if ! command -v pm2 >/dev/null 2>&1; then
    log "üì¶ Instalando PM2..."
    npm install -g pm2
fi

# Iniciar containers Docker com nova configura√ß√£o
cd "$DEPLOY_DIR/src/docker"
log "üê≥ Iniciando containers Docker..."
docker compose -f docker-compose.production.yml up -d --force-recreate

# Aguardar containers ficarem prontos
log "‚è≥ Aguardando containers ficarem prontos..."
sleep 30

# Verificar status dos containers
log "üì¶ Status dos containers:"
docker compose -f docker-compose.production.yml ps

# Iniciar aplica√ß√£o Node.js
cd "$DEPLOY_DIR/src"
log "üöÄ Iniciando aplica√ß√£o Node.js..."
pm2 restart supabase-manager 2>/dev/null || pm2 start server.js --name supabase-manager

# ============================================================================
# ETAPA 6: VERIFICA√á√ïES P√ìS-DEPLOY
# ============================================================================

log "üîç ETAPA 6: Verifica√ß√µes p√≥s-deploy..."

# Aguardar servi√ßos ficarem prontos
sleep 15

# Verificar PM2
if pm2 list | grep -q supabase-manager; then
    log "‚úÖ PM2 est√° rodando"
else
    warn "‚ö†Ô∏è PM2 n√£o est√° rodando corretamente"
    pm2 logs supabase-manager --lines 10 || true
fi

# Verificar containers
if docker ps | grep -q supabase-manager-nginx; then
    log "‚úÖ Container nginx est√° rodando"
else
    warn "‚ö†Ô∏è Container nginx n√£o est√° rodando"
fi

if docker ps | grep -q supabase-instance-manager; then
    log "‚úÖ Container manager est√° rodando"
else
    warn "‚ö†Ô∏è Container manager n√£o est√° rodando"
fi

# Verificar conectividade interna
log "üîç Testando conectividade interna..."

# Testar aplica√ß√£o diretamente
if curl -f -s http://localhost:3080/api/health >/dev/null 2>&1; then
    log "‚úÖ Aplica√ß√£o responde na porta 3080"
else
    warn "‚ö†Ô∏è Aplica√ß√£o n√£o responde na porta 3080"
fi

# Testar nginx
if curl -f -s http://localhost:80 >/dev/null 2>&1; then
    log "‚úÖ Nginx responde na porta 80"
else
    warn "‚ö†Ô∏è Nginx n√£o responde na porta 80"
fi

# Verificar logs do nginx
log "üìã Logs do nginx:"
docker logs supabase-manager-nginx --tail 10 2>/dev/null || echo "N√£o foi poss√≠vel obter logs do nginx"

# Verificar logs da aplica√ß√£o
log "üìã Logs da aplica√ß√£o:"
docker logs supabase-instance-manager --tail 10 2>/dev/null || echo "N√£o foi poss√≠vel obter logs da aplica√ß√£o"

# ============================================================================
# RESULTADO FINAL
# ============================================================================

log "üéâ DEPLOY MANUAL CONCLU√çDO!"
log "========================="
log "‚úÖ Vers√£o: $VERSION_TAG"
log "‚úÖ Backup: $BACKUP_PATH"
log ""
log "üåê Teste a aplica√ß√£o:"
log "   http://82.25.69.57"
log ""
log "üîç Para debug adicional:"
log "   docker logs supabase-manager-nginx"
log "   docker logs supabase-instance-manager"
log "   pm2 logs supabase-manager"

DEPLOY_SCRIPT

echo "‚úÖ Deploy manual conclu√≠do!"
echo "üåê Teste: http://$VPS_HOST" 